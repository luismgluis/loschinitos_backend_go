package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/dgraph-io/dgo/v200"
	"github.com/dgraph-io/dgo/v200/protos/api"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"google.golang.org/grpc"

	"github.com/mholt/binding"
	//ayuda para httpreques
	"github.com/go-chi/cors"
	//para los CORS
)

const (
	port = 9080        //9180 //8080
	host = "localhost" //127.0.0.1
)

var router *chi.Mux

type CancelFunc func()
type FunctionBackBytes func(data []byte)
type FunctionBackString func(data string)

func getDgraphClient() (*dgo.Dgraph, CancelFunc) {

	//------------
	direccion := host + ":" + strconv.Itoa(port)
	conn, err := grpc.Dial(direccion, grpc.WithInsecure())
	if err != nil {
		log.Fatal("While trying to dial gRPC")
	}
	dc := api.NewDgraphClient(conn)
	dgraphClient := dgo.NewDgraphClient(dc)
	//-----------
	/*
		conn, err := dgo.DialSlashEndpoint("https://gutsy-grape.us-west-2.aws.cloud.dgraph.io/graphql", "T1LEBKB4N6+iEdgv6oxYTiW9XQntVsTLzVTwjttyDr4=") //"EpUZOdIYZBGkPqo1BwkVfSJ8j9ALBdcrNBkD2PT21xk=")
		if err != nil {
			log.Fatal(err)
		}
		defer conn.Close()
		dgraphClient := dgo.NewDgraphClient(api.NewDgraphClient(conn))



				local


	*/
	// Perform login call. If the Dgraph cluster does not have ACL and
	// enterprise features enabled, this call should be skipped.
	/*
		ctx := context.Background()
		for {
			// Keep retrying until we succeed or receive a non-retriable error.
			err = dg.Login(ctx, "groot", "password")
			if err == nil || !strings.Contains(err.Error(), "Please retry") {
				break
			}
			time.Sleep(time.Second)
		}*/
	if err != nil {
		log.Fatalf("While trying to login %v", err.Error())
	}

	return dgraphClient, func() {
		if err := conn.Close(); err != nil {
			log.Printf("Error while closing connection:%v", err)
		}
	}
}

func Pruebaget_data() {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	txn := dg.NewTxn()
	defer txn.Discard(ctx)

	q := `query all($a: string) {
		all(func: eq(name, $a)) {
		  name
		}
	  }`
	q = `
	query people(func: has(name)) {
		name
		age
		uid
		followers {
		  uid
		  name
		}
	  }`
	q = `
	  {
		people(func: has(name)) {
		  name
		  age
		  uid
		  followers {
			uid
			name
		  }
		}
	  } 
	  `
	//res, err := txn.QueryWithVars(ctx, q, map[string]string{"$a": "Alice"})
	res, err := txn.Query(ctx, q)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", res.Json)
}
func Pruebaset_data() {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	op := &api.Operation{
		Schema: `name: string @index(exact) .`,
	}
	err := dg.Alter(ctx, op)

	type Persona struct {
		Uid   string   `json:"uid,omitempty"`
		Name  string   `json:"name,omitempty"`
		DType []string `json:"dgraph.type,omitempty"`
	}

	p := Persona{
		Uid:   "_:alice",
		Name:  "Alice",
		DType: []string{"Persona"},
	}

	pb, err := json.Marshal(p)
	if err != nil {
		log.Fatal(err)
	}

	mu := &api.Mutation{
		SetJson: pb,
	}

	txn := dg.NewTxn()
	defer txn.Discard(ctx)

	res, err := txn.Mutate(ctx, mu)
	if err != nil {
		log.Fatal(err)
	}

	err2 := txn.Commit(context.Background())
	if err2 != nil {
		log.Fatal(err2)
	}
	/*req := &api.Request{CommitNow:true, Mutations: []*api.Mutation{mu}}
	res, err := txn.Do(ctx, req)
	if err != nil {
	  log.Fatal(err)
	}*/
	fmt.Printf("%s\n", res)
}
func Pruebaset_data2() {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	op := &api.Operation{
		Schema: `name: string @index(exact) .`,
	}
	err := dg.Alter(ctx, op)

	type Persona struct {
		Uid   string   `json:"uid,omitempty"`
		Name  string   `json:"name,omitempty"`
		DType []string `json:"dgraph.type,omitempty"`
	}

	p := Persona{
		Uid:   "0x6", //"_:pedro",
		Name:  "Alice One",
		DType: []string{"Persona"},
	}

	pb, err := json.Marshal(p)
	if err != nil {
		log.Fatal(err)
	}

	mu := &api.Mutation{
		SetJson: pb,
	}

	txn := dg.NewTxn()
	defer txn.Discard(ctx)

	res, err := txn.Mutate(ctx, mu)
	if err != nil {
		log.Fatal(err)
	}

	err2 := txn.Commit(context.Background())
	if err2 != nil {
		log.Fatal(err2)
	}
	/*req := &api.Request{CommitNow:true, Mutations: []*api.Mutation{mu}}
	res, err := txn.Do(ctx, req)
	if err != nil {
	  log.Fatal(err)
	}*/
	fmt.Printf("%s\n", res)
}

func InsertNewCliente(clientef Cliente) {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	op := &api.Operation{
		Schema: `name: string @index(exact) .`,
	}
	err := dg.Alter(ctx, op)

	/*
		}p := Cliente{
			UID:    "0x1", //"_:pedro",
			Name:   "Alice One1",
			Age:    30,
			Avatar: "",
			DType:  []string{"Persona"},
		}*/

	clientef.UID = "_:elid"
	pb, err := json.Marshal(clientef)
	if err != nil {
		log.Fatal(err)
	}

	mu := &api.Mutation{
		SetJson: pb,
	}

	txn := dg.NewTxn()
	defer txn.Discard(ctx)

	res, err := txn.Mutate(ctx, mu)
	if err != nil {
		log.Fatal(err)
	}

	err2 := txn.Commit(context.Background())
	if err2 != nil {
		log.Fatal(err2)
	}
	/*req := &api.Request{CommitNow:true, Mutations: []*api.Mutation{mu}}
	res, err := txn.Do(ctx, req)
	if err != nil {
	  log.Fatal(err)
	}*/
	fmt.Printf("%s\n", res)
}

func MutacionDataBase(bbb Cliente, fn FunctionBackString) {

	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	op := &api.Operation{
		Schema: `name: string @index(exact) .
		avatar: string .
		age: int .`,
	}
	err_alter := dg.Alter(ctx, op)
	if err_alter != nil {
		log.Fatal(err_alter)
	}

	txn := dg.NewTxn()
	defer txn.Discard(ctx)

	bites, err := json.Marshal(&bbb)
	if err != nil {
		log.Fatal(err)
	}

	mu := &api.Mutation{
		SetJson: bites,
	}

	res, err := txn.Mutate(ctx, mu)
	if err != nil {
		log.Fatal(err)
	}
	//inesperado tenia que hacer esto
	err2 := txn.Commit(context.Background())
	if err2 != nil {
		log.Fatal(err2)
	}
	/*
		req := &api.Request{
			CommitNow: true,
			Mutations: []*api.Mutation{mu},
		}
		res, err := txn.Do(ctx, req)
		if err != nil {
			log.Fatal(err)
		}*/
	fmt.Printf("%s", res)
}

func ConsultaDataBase(query string, fn FunctionBackBytes) {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	txn := dg.NewTxn()
	defer txn.Discard(ctx)

	//clientes := []Cliente{}
	//res, err := txn.QueryWithVars(ctx, q, map[string]string{"$a": "Alice"})
	res, err := txn.Query(ctx, query)

	//s := string(`{"operation": "get", "key": "example"}`)

	if err == nil {
		fmt.Printf("%s\n", res.Json)
		fn(res.Json)
	} else {
		fn(nil)
	}
}

func ConsultaDataBaseJson(query string, fn FunctionBackString) {
	ConsultaDataBase(query, func(data []byte) {
		fn("" + string(data))
	})
}

func routers() *chi.Mux {

	router.Get("/", ping)

	router.Get("/clientes", AllClientes)
	router.Get("/alldata", AllClientes)
	router.Get("/cliente/{id}", EspecificoCliente)
	router.Post("/cliente/create", CrearCliente)
	router.Put("/cliente/update/{id}", ActualizarCliente)
	router.Delete("/cliente/{id}", EliminarCliente)

	return router
}

// server starting point
func ping(w http.ResponseWriter, r *http.Request) {
	respondwithJSON(w, http.StatusOK, map[string]string{"message": "Pong"})
}

func main() {
	router = chi.NewRouter() //iniciamos el router
	//esto porque lo estamos invocando de otro dominio
	router.Use(cors.Handler(cors.Options{
		// AllowedOrigins: []string{"https://foo.com"}, // Use this to allow specific origin hosts
		AllowedOrigins: []string{"*"},
		// AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))
	router.Use(middleware.Recoverer)
	routers() //pone las redirecciones
	http.ListenAndServe(":3000", Logger())
}

//-------------- API ENDPOINT ------------------//

// AllData returns todoslos datos en la DB
func AllData(w http.ResponseWriter, r *http.Request) {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	txn := dg.NewTxn()
	defer txn.Discard(ctx)
	q := `
	  {
		clientes(func: has(name)) {
		  name
		  age
		  uid
		  followers {
			uid
			name
		  }
		}
	  } 
	  `
	//clientes := []Cliente{}
	//res, err := txn.QueryWithVars(ctx, q, map[string]string{"$a": "Alice"})
	res, err := txn.Query(ctx, q)

	//s := string(`{"operation": "get", "key": "example"}`)

	if err == nil {
		fmt.Printf("%s\n", res.Json)
		w.Header().Set("Content-Type", "application/json")
		w.Write(res.Json)
		//respondwithJSON(w, http.StatusOK, res.Json)
	} else {
		respondwithJSON(w, http.StatusOK, `{"result":"error"}`)
	}
}

// AllClientes returns todos los clientes en la DB
func AllClientes(w http.ResponseWriter, r *http.Request) {
	dg, cancel := getDgraphClient()
	defer cancel()

	ctx := context.Background()

	txn := dg.NewTxn()
	defer txn.Discard(ctx)
	q := `
	  {
		clientes(func: has(name)) {
		  name
		  age
		  uid
		  followers {
			uid
			name
		  }
		}
	  } 
	  `
	//clientes := []Cliente{}
	//res, err := txn.QueryWithVars(ctx, q, map[string]string{"$a": "Alice"})
	res, err := txn.Query(ctx, q)

	//s := string(`{"operation": "get", "key": "example"}`)

	if err == nil {
		fmt.Printf("%s\n", res.Json)
		w.Header().Set("Content-Type", "application/json")
		w.Write(res.Json)
		//respondwithJSON(w, http.StatusOK, res.Json)
	} else {
		respondwithJSON(w, http.StatusOK, `{"result":"error"}`)
	}
}

func EspecificoCliente(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	fmt.Printf("%s", id)
	query := fmt.Sprintf(`
	{
		cliente(func: uid(%s)){
			uid
			name
			age
		}
	}
	`, id)
	ConsultaDataBaseJson(query, func(data string) {
		w.Header().Set("Content-Type", "application/json")
		w.Write([]byte(data))
	})
}

// CrearCliente crea un nuevo cliente
func CrearCliente(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	fmt.Printf("%s", id)
	cliente := new(Cliente)
	if errs := binding.Bind(r, cliente); errs != nil {
		http.Error(w, errs.Error(), http.StatusBadRequest)
		return
	}

	query := fmt.Sprintf(`
	{
		cliente(func: uid(%s)){
			uid
			name
			age
		}
	}
	`, id)

	ConsultaDataBase(query, func(data []byte) {
		if data != nil {
			InsertNewCliente(*cliente)
		} else {
			w.Header().Set("Content-Type", "application/json")
			w.Write([]byte(`{"result":"error"}`))
		}
	})

}

// ActualizarCliente actualiza un cliente
func ActualizarCliente(w http.ResponseWriter, r *http.Request) {
	cliente := new(Cliente)
	if errs := binding.Bind(r, cliente); errs != nil {
		http.Error(w, errs.Error(), http.StatusBadRequest)
		return
	}

	InsertNewCliente(*cliente)

}

// EliminarCliente remove a spesific post
func EliminarCliente(w http.ResponseWriter, r *http.Request) {
	/*id := chi.URLParam(r, "id")

	query, err := db.Prepare("delete from posts where id=?")
	catch(err)
	_, er := query.Exec(id)
	catch(er)
	query.Close()

	respondwithJSON(w, http.StatusOK, map[string]string{"message": "successfully deleted"})*/
}
